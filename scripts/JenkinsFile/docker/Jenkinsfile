pipeline {
    agent any

    parameters {
        gitParameter branch: '', branchFilter: '.*', defaultValue: 'master', description: '分支', name: 'branch', quickFilterEnabled: false, selectedValue: 'NONE', sortMode: 'NONE', tagFilter: '*', type: 'GitParameterDefinition'
        string defaultValue: 'git@github.com:oyh980707/JavaArchitects.git', description: 'git地址', name: 'srcUrl'
        choice(name: 'server_name', choices: ['mysql', 'redis', 'nacos'], description: '中间件服务')
        credentials credentialType: 'com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey', defaultValue: '51ec1f69-74c0-4f01-87bf-8a29eb2ad814', description: '凭证', name: 'Credential', required: true
    }

    stages {
        stage('拉取代码') {
            steps {
                // 删除工作空间
                deleteDir()
                println("${params.branch}")
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "${params.branch}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [cloneOption(depth: 1, noTags: false, reference: '', shallow: true, timeout: 20)],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: "${params.Credential}", url: "${params.srcUrl}"]]])
            }
        }
        stage("启动新的mysql服务") {
            
            when { environment name: 'server_name', value: 'mysql' } 
            step{
                script{
                    //无论是否会报错，这个stage以及构建结果都不会因这个错误而失败。
                    catchError(buildResult: 'SUCCESS', catchInterruptions: false) {
                        sh "docker stop ms-mysql && docker rm ms-mysql && docker rmi ms-mysql"
                    }
                    sh "cd scripts/JenkinsFile/docker/ && docker-compose up --build -d ms-mysql"
                }
            }
        }
        stage("启动redis服务") {
            when { environment name: 'server_name', value: 'redis' } 
            steps {
                sh "cd scripts/JenkinsFile/docker/ && docker-compose up --build -d ms-redis"
            }
        }
        stage("启动nacos服务") {
            when { environment name: 'server_name', value: 'nacos' } 
            steps {
                sh "cd scripts/JenkinsFile/docker/ && docker-compose up --build -d ms-nacos"
            }
        }
    }

}